import asyncio
import random
from contextlib import asynccontextmanager
from typing import Any

from aiodocker import Docker
from aiodocker.containers import DockerContainer
from nanoid import generate

from src.auth import AuthUser
from src.logs import logger
from src.settings import settings

UNASSIGNED_USER_ID = "UNASSIGNED"
FRIENDLY_CHARS: str = "23456789abcdefghijkmnpqrstuvwxyz"


class ServerManager:
    """
    Manages the lifecycle and routing of containers.

    === Containers ===
    - Containers run the settings.SERVER_IMAGE service in the same network as the gateway and proxy services.
    - Container identifiers:
      - CONTAINER_ID: the id of the container, auto created by Docker.
      - HOSTNAME: the network hostname of the container, random string generated by nanoid.
      - CONTAINER_NAME: the name of the container, UNASSIGNED-[HOSTNAME] for unassigned containers
          and [USER_ID]-[HOSTNAME] for assigned containers, where assigned USER_ID is AuthUser.user_id.
      - USER_HOSTNAME: an alias of network hostname, equals to AuthUser.user_id.
    - Containers can be reached by HOSTNAME and USER_HOSTNAME on the network with settings.DOCKER_DOMAIN.

    === Lifecyle and Routing ===
    - The pool maintains a list of settings.MIN_SERVER_POOL_SIZE unassigned containers.
    - When a new user connects, the manager will assign a container from the pool to the user, and backfill the pool.
    - When an existing user connects
      - via MCP, the request is routed to the container by USER_HOSTNAME (AuthUser.user_id).
      - via hosted link, the request is routed to the container by the link_id, where it encodes HOSTNAME.
    """

    @classmethod
    async def get_user_hostname(cls, user: AuthUser) -> str:
        """Get the hostname of the user's container. Assign one if not exists."""
        async with docker_client() as docker:
            if not await cls._user_has_container(user, docker=docker):
                await cls._assign_container(user, docker=docker)
                await cls.backfill_container_pool(docker=docker)
        return cls.full_hostname(user.user_id)

    @classmethod
    async def get_unassigned_server_host(cls) -> str:
        container = await cls._get_random_unassigned_container()
        container_name = cls._container_name(container)
        hostname = container_name.split("-")[-1]
        return cls.full_hostname(hostname)

    @classmethod
    def full_hostname(cls, hostname: str) -> str:
        return f"{hostname}{settings.DOCKER_DOMAIN}"

    @classmethod
    async def backfill_container_pool(cls, *, docker: Docker | None = None):
        async with docker_client(docker) as _docker:
            containers = await cls._get_containers(prefix=UNASSIGNED_USER_ID, docker=_docker)
            num = settings.MIN_CONTAINER_POOL_SIZE - len(containers)
            logger.info(f"Backfill server pool with {num} servers")
            await asyncio.gather(*[cls._create_server(docker=_docker) for _ in range(num)])

    @classmethod
    async def _user_has_container(cls, user: AuthUser, *, docker: Docker | None = None) -> bool:
        containers = await cls._get_containers(prefix=user.user_id, docker=docker)
        return len(containers) != 0

    @classmethod
    async def _get_random_unassigned_container(cls, docker: Docker | None = None):
        containers = await cls._get_containers(prefix=UNASSIGNED_USER_ID, docker=docker)
        if not containers:
            raise ValueError("No unassigned containers found")
        container = random.choice(containers)
        logger.info(f"Randomly selected unassigned container {container.id[:12]}")
        return container

    @classmethod
    async def _create_server(cls, *, docker: Docker | None = None):
        # TODO: ensure the hostname is unique
        hostname = generate(FRIENDLY_CHARS, 6)

        # TODO: reuse the data dir when the container is recreated
        src_data_dir = str(settings.server_mount_dir(hostname))
        dst_data_dir = "/app/data"

        config: dict[str, Any] = {
            "Image": settings.SERVER_IMAGE,
            "Env": [
                f"LOG_LEVEL={settings.LOG_LEVEL}",
                "BROWSER_TIMEOUT=300000",
                f"BROWSER_HTTP_PROXY={settings.BROWSER_HTTP_PROXY}",
                f"BROWSER_HTTP_PROXY_PASSWORD={settings.BROWSER_HTTP_PROXY_PASSWORD}",
                f"OPENAI_API_KEY={settings.OPENAI_API_KEY}",
                f"SENTRY_DSN={settings.SERVER_SENTRY_DSN}",
                f"DATA_DIR={dst_data_dir}",
                f"HOSTNAME={hostname}",
                "PORT=80",
            ],
            "HostConfig": {"Binds": [f"{src_data_dir}:{dst_data_dir}:rw"]},
            "NetworkingConfig": {
                "EndpointsConfig": {cls._network_name(): {"Aliases": [cls.full_hostname(hostname)]}}
            },
        }

        async with docker_client(docker) as docker:
            container = await docker.containers.run(  # type: ignore[reportUnknownMemberType]
                config, name=f"{UNASSIGNED_USER_ID}-{hostname}"
            )
            logger.info(f"Created server hostname: {hostname}, id: {container.id[:12]}")
        return hostname

    @classmethod
    async def _assign_container(cls, user: AuthUser, *, docker: Docker | None = None):
        async with docker_client(docker) as docker:
            # rename the container to [AuthUser.user_id]-[HOSTNAME]
            container = await cls._get_random_unassigned_container(docker)
            unassigned_container_name: str = cls._container_name(container)
            hostname = unassigned_container_name.removeprefix(f"{UNASSIGNED_USER_ID}-")
            assigned_container_name = f"{user.user_id}-{hostname}"
            await container.rename(assigned_container_name)  # type: ignore[reportUnknownMemberType]

            # add HOSTNAME and USER_HOSTNAME (AuthUser.user_id) to the container network aliases
            network = await docker.networks.get(cls._network_name())
            await network.disconnect({"Container": container.id})
            await network.connect({  # type: ignore[reportUnknownMemberType]
                "Container": container.id,
                "EndpointConfig": {
                    "Aliases": [cls.full_hostname(hostname), cls.full_hostname(user.user_id)]
                },
            })
            logger.info(f"Assigned container {container.id} to {user.user_id}")

        return user.user_id

    @classmethod
    async def _get_containers(cls, *, prefix: str, docker: Docker | None = None):
        """Container names are [USER_ID]-[HOSTNAME] or UNASSIGNED-[HOSTNAME]"""
        async with docker_client(docker) as docker:
            containers = await docker.containers.list(  # type: ignore[reportUnknownMemberType]
                filters={"ancestor": [settings.SERVER_IMAGE], "name": [prefix]}
            )
        return containers

    @classmethod
    def _container_name(cls, container: DockerContainer) -> str:
        return container._container["Names"][0].strip("/")  # type: ignore[reportUnknownMemberType]

    @classmethod
    def _network_name(cls):
        return f"{settings.DOCKER_PROJECT_NAME}_{settings.DOCKER_NETWORK_NAME}"

    @classmethod
    def _user_server_host(cls, user: AuthUser) -> str:
        return f"{user.user_id}.{user.auth_provider}"


@asynccontextmanager
async def docker_client(client: Docker | None = None):
    nested = client is not None

    _client = client or Docker()
    try:
        yield _client
    finally:
        if not nested:
            await _client.close()
